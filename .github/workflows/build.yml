name: Build

on:
  push:
    branches: [ "main" ]

# Cancel in-progress runs of the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Change this to your binary name
  APP_NAME: seeker
  # Common build flags
  GOFLAGS: -trimpath
  LDFLAGS: -s -w -X "main.version=${{ github.sha }}"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux   # x86_64
            goarch: amd64
            ext: ""
          - goos: linux   # ARM64
            goarch: arm64
            ext: ""
          - goos: darwin  # macOS Intel
            goarch: amd64
            ext: ""
          - goos: darwin  # macOS Apple Silicon
            goarch: arm64
            ext: ""
          - goos: windows # Windows x86_64
            goarch: amd64
            ext: .exe
          - goos: windows # Windows ARM64
            goarch: arm64
            ext: .exe

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: stable
          cache: 'true'

      - name: Print Go env
        run: |
          go env
          go version
          go tool dist list | grep -E '^(linux|darwin|windows)/(amd64|arm64)$' || true

      - name: Build (${{ matrix.goos }}/${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: '0'
        run: |
          set -euo pipefail
          mkdir -p dist
          NAME="${APP_NAME}-${GOOS}-${GOARCH}"
          BIN="dist/${NAME}${{ matrix.ext }}"
          echo "Building -> ${BIN}"
          go build $GOFLAGS -ldflags "$LDFLAGS" -o "$BIN" ./cmd/seeker
          # Ensure executable bit on unix-like targets (Windows ignores it)
          chmod +x "$BIN" || true
          ls -lh "$BIN"

      - name: Package (${{ matrix.goos }}/${{ matrix.goarch }})
        run: |
          set -euo pipefail
          NAME="${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ARCHIVE="${NAME}.zip"
            zip -9 "$ARCHIVE" "${NAME}.exe"
          else
            ARCHIVE="${NAME}.tar.gz"
            tar -czf "$ARCHIVE" "$NAME"
          fi
          echo "Created archive: $ARCHIVE"
          ls -lh "$ARCHIVE"

      - name: Checksums (per-artifact)
        run: |
          set -euo pipefail
          NAME="${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cd dist
          # Only hash this job's outputs to keep checksums specific
          FILES=("$NAME${{ matrix.ext }}" "$NAME.tar.gz" "$NAME.zip")
          TO_HASH=()
          for f in "${FILES[@]}"; do
            [ -f "$f" ] && TO_HASH+=("$f")
          done
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${TO_HASH[@]}" > "SHA256SUMS-${NAME}.txt"
          else
            shasum -a 256 "${TO_HASH[@]}" > "SHA256SUMS-${NAME}.txt"
          fi
          echo "Checksums written to dist/SHA256SUMS-${NAME}.txt"
          cat "SHA256SUMS-${NAME}.txt"

      - name: Upload artifact (${{ matrix.goos }}/${{ matrix.goarch }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
            dist/${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
            dist/${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            dist/SHA256SUMS-${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}*.txt
          if-no-files-found: warn
